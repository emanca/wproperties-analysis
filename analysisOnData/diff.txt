diff --git a/Fit/fitUtils.py b/Fit/fitUtils.py
index 2cef9fd..3355047 100644
--- a/Fit/fitUtils.py
+++ b/Fit/fitUtils.py
@@ -27,7 +27,7 @@ class fitUtils:
             #"LHEScaleWeightVars" : ["LHEScaleWeight_muR0p5_muF0p5", "LHEScaleWeight_muR0p5_muF1p0","LHEScaleWeight_muR1p0_muF0p5","LHEScaleWeight_muR1p0_muF2p0","LHEScaleWeight_muR2p0_muF1p0", "LHEScaleWeight_muR2p0_muF2p0"],
             #"ptScaleVars" : [ "corrected"], 
             #"jmeVars" : ["jesTotal", "unclustEn"],
-            "LHEPdfWeightVars" : ["LHEPdfWeightHess{}".format(i+1) for i in range(60)]
+            #"LHEPdfWeightVars" : ["LHEPdfWeightHess{}".format(i+1) for i in range(60)]
         }
         
         #all the files that are needed
@@ -42,6 +42,7 @@ class fitUtils:
     def getTemplates(self):
         
         for key in self.fsig.Get("Nominal").GetListOfKeys():
+            if 'clos' in key.GetName() or 'mapTot' in key.GetName(): continue
             if not 'mass' in key.GetName():
                 self.templates2D[key.GetName()] = {}
                 self.templates2D[key.GetName()]['Nominal']=[]
@@ -284,8 +285,8 @@ class fitUtils:
                 aux[self.channel][proc] = 0.0
                 aux[self.channel+'_xsec'][proc] = 0.0
         
-        for i in range(60):
-            self.DC.systs.append(('LHEPdfWeightHess{}'.format(i+1), False, 'shape', [], aux))
+        #for i in range(60):
+            #self.DC.systs.append(('LHEPdfWeightHess{}'.format(i+1), False, 'shape', [], aux))
 
         aux2 = {}
         aux2[self.channel] = {}
@@ -297,7 +298,7 @@ class fitUtils:
                 aux2[self.channel][proc] = 0.0
             aux2[self.channel+'_xsec'][proc] = 0.0
         
-        self.DC.systs.append(('mass', False, 'shapeNoConstraint', [], aux2))
+        self.DC.systs.append(('mass', False, 'shape', [], aux2))
         
         self.DC.shapeMap = 	{self.channel: {'*': [self.channel+'.root', '$PROCESS', '$PROCESS_$SYSTEMATIC']},\
         self.channel+'_xsec': {'*': [self.channel+'_xsec.root', '$PROCESS', '$PROCESS_$SYSTEMATIC']}} # <type 'dict'>
@@ -309,8 +310,8 @@ class fitUtils:
         self.DC.frozenNuisances  =  set([]) # <type 'set'>
         self.DC.systematicsShapeMap =  {} # <type 'dict'>
         self.DC.nuisanceEditLines    =  [] # <type 'list'>
-        self.DC.groups   =  {'pdfs': set(['LHEPdfWeightHess{}'.format(i+1) for i in range(60)])} # <type 'dict'>
-        #self.DC.groups   =  {} # <type 'dict'>
+        #self.DC.groups   =  {'pdfs': set(['LHEPdfWeightHess{}'.format(i+1) for i in range(60)])} # <type 'dict'>
+        self.DC.groups   =  {} # <type 'dict'>
         self.DC.discretes    =  [] # <type 'list'>
         self.DC.helGroups = self.helGroups
         self.DC.sumGroups = self.sumGroups
diff --git a/Fit/runFit.py b/Fit/runFit.py
index d4cceb3..f1b39c5 100644
--- a/Fit/runFit.py
+++ b/Fit/runFit.py
@@ -4,9 +4,9 @@ import math
 from fitUtils import fitUtils
 import os
 
-basepath = '/scratch/emanca/wproperties-analysis/analysisOnData/python/templates2D/'
+basepath = '/scratchnvme/emanca/wproperties-analysis/analysisOnData/python/templates2D/'
 fsig = basepath+'WPlus_2D_ACTemplates.root'
-fmap = '/scratch/emanca/wproperties-analysis/analysisOnGen/genInput.root'
+fmap = '/scratchnvme/emanca/wproperties-analysis/analysisOnGen/genInput.root'
 
 samples = ["DY","Diboson","Top","Fake","Tau","LowAcc","data_obs"]
 
@@ -34,7 +34,7 @@ text2hd5f = 'text2hdf5.py --allowNegativeExpectation --maskedChan={}_xsec {}.pkl
 print 'executing', text2hd5f 
 os.system(text2hd5f)
 
-#combinetf = 'combinetf.py --allowNegativePOI --binByBinStat --correlateXsecStat --doImpacts -t-1 {}.pkl.hdf5 -o fit_{}.root'.format(f.channel, f.channel)
-combinetf = 'combinetf.py --allowNegativePOI  --doImpacts -t-1 {}.pkl.hdf5 -o fit_{}.root'.format(f.channel, f.channel)
+combinetf = 'combinetf.py --allowNegativePOI --binByBinStat --correlateXsecStat --doImpacts -t-1 {}.pkl.hdf5 -o fit_{}.root'.format(f.channel, f.channel)
+#combinetf = 'combinetf.py --allowNegativePOI  --doImpacts -t-1 {}.pkl.hdf5 -o fit_{}.root'.format(f.channel, f.channel)
 print 'executing', combinetf
 os.system(combinetf)
diff --git a/RDFprocessor b/RDFprocessor
index fb29cc1..b4439c9 160000
--- a/RDFprocessor
+++ b/RDFprocessor
@@ -1 +1 @@
-Subproject commit fb29cc14ea35353c7358c55ed9f96ca62871f183
+Subproject commit b4439c9c588f8b775e7e1f173583b3592c813566
diff --git a/analysisOnData/Makefile b/analysisOnData/Makefile
index ff1ec24..696c706 100644
--- a/analysisOnData/Makefile
+++ b/analysisOnData/Makefile
@@ -1,5 +1,5 @@
 GCC=g++
-CXXFLAGS=`root-config --libs --cflags` -O3 -fPIC -Wall -I../  -I./  -I /scratch/sroychow/eigen-3.3.7/
+CXXFLAGS=`root-config --libs --cflags` -O3 -fPIC -Wall -I../  -I./  -I /scratchnvme/sroychow/eigen-3.3.7/
 SOFLAGS=-shared
 
 SRCDIR=src
@@ -33,7 +33,7 @@ $(OBJ) : $(BINDIR)/%.o : $(SRCDIR)/%.cpp interface/%.hpp | $(BINDIR)
 Dict: $(BINDIR)/dict.o
 
 $(BINDIR)/dict.o: $(SRC) | $(BINDIR)
-	genreflex $(SRCDIR)/classes.h -s $(SRCDIR)/classes_def.xml -o $(BINDIR)/dict.cc --fail_on_warnings --rootmap=$(BINDIR)/dict.rootmap --rootmap-lib=libSignalAnalysis.so -I interface/ -I../ -I /scratch/sroychow/eigen-3.3.7
+	genreflex $(SRCDIR)/classes.h -s $(SRCDIR)/classes_def.xml -o $(BINDIR)/dict.cc --fail_on_warnings --rootmap=$(BINDIR)/dict.rootmap --rootmap-lib=libSignalAnalysis.so -I interface/ -I../ -I /scratchnvme/sroychow/eigen-3.3.7
 	$(GCC) -c -o $(BINDIR)/dict.o $(CXXFLAGS) $(RPATH) -I interface $(BINDIR)/dict.cc
 
 $(BINDIR):
diff --git a/analysisOnData/bin/dict_rdict.pcm b/analysisOnData/bin/dict_rdict.pcm
new file mode 100644
index 0000000..2b0f291
Binary files /dev/null and b/analysisOnData/bin/dict_rdict.pcm differ
diff --git a/analysisOnData/data/selections.py b/analysisOnData/data/selections.py
index 8cc5f56..e358a63 100644
--- a/analysisOnData/data/selections.py
+++ b/analysisOnData/data/selections.py
@@ -3,8 +3,9 @@ selections = {
   }
 
 selections_bkg = {
-  "Signal":         "Vtype==0 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT>=40.0 && MET_filters==1 && nVetoElectrons==0 && 1",
-  "Signal_aiso":    "Vtype==1 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT>=40.0 && MET_filters==1 && nVetoElectrons==0 && 1",
+  #"Signal":         "Vtype==0 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT>=40.0 && MET_filters==1 && nVetoElectrons==0 && 1",
+"Signal": "1.",
+ "Signal_aiso":    "Vtype==1 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT>=40.0 && MET_filters==1 && nVetoElectrons==0 && 1",
   "Sideband":       "Vtype==0 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT<=30.0 && MET_filters==1 && nVetoElectrons==0 && 1",
   "Sideband_aiso":  "Vtype==1 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT<=30.0 && MET_filters==1 && nVetoElectrons==0 && 1",
   "Sideband15":       "Vtype==0 && HLT_SingleMu24 && Mu1_pt>25.0 && Mu1_pt<55.0 && MT<=15.0 && MET_filters==1 && nVetoElectrons==0 && 1",
diff --git a/analysisOnData/interface/templateBuilder.hpp b/analysisOnData/interface/templateBuilder.hpp
index 2ea34fa..b522e99 100644
--- a/analysisOnData/interface/templateBuilder.hpp
+++ b/analysisOnData/interface/templateBuilder.hpp
@@ -20,10 +20,12 @@ private:
   
   const int nBinsY = 6;
   const int nBinsQt = 8;
-  const int nBinsEta = 48;
-  const int nBinsPt = 30;
+  const int nBinsEta = 100;
+  const int nBinsPt = 80;
   const int nBinsCharge = 2;
-
+  std::vector<float> _pTArr = std::vector<float>(81);
+  std::vector<float> _etaArr = std::vector<float>(101);
+  std::vector<float> _yArr = std::vector<float>(7);
 
 public:
   templateBuilder(std::string filter, std::string weight, std::vector<std::string> syst_name, std::string syst_weight, HistoCategory hcat, std::string colvar = "")
@@ -35,7 +37,7 @@ public:
         _syst_weight = syst_weight;
         _hcat = hcat;
         _colvar = colvar;
-        //setAxisarrays();
+        setAxisarrays();
     };
 
     templateBuilder(std::vector<std::string> filtervec, std::string weight, std::vector<std::string> syst_name, std::string syst_weight, HistoCategory hcat, std::vector<std::string> colvarvec)
@@ -47,7 +49,7 @@ public:
         _syst_weight = syst_weight;
         _hcat = hcat;
         _colvarvec = colvarvec;
-        //setAxisarrays();
+        setAxisarrays();
     };
 
   ~templateBuilder(){};
@@ -56,6 +58,7 @@ public:
   RNode bookJMEvarhistos(RNode);
   RNode bookWeightVariatedhistos(RNode d);
   RNode run(RNode) override;
+  void setAxisarrays();
   std::vector<std::string> stringMultiplication(const std::vector<std::string> &v1, const std::vector<std::string> &v2);
   static ROOT::VecOps::RVec<float> vecMultiplication(const ROOT::VecOps::RVec<float> &v1, const ROOT::VecOps::RVec<float> &v2) {
     ROOT::VecOps::RVec<float> products;
@@ -64,7 +67,7 @@ public:
     for (auto e1 : v1)
       for (auto e2 : v2)
 	products.push_back(e1 * e2);
-    
+
     return products;
   
   }
diff --git a/analysisOnData/interface/templates.hpp b/analysisOnData/interface/templates.hpp
index 8c1274c..8c82fb4 100644
--- a/analysisOnData/interface/templates.hpp
+++ b/analysisOnData/interface/templates.hpp
@@ -19,8 +19,8 @@ private:
     std::vector<std::string> _colvarvec;
     HistoCategory _hcat;
 
-    std::vector<float> _pTArr = std::vector<float>(31);
-    std::vector<float> _etaArr = std::vector<float>(49);
+    std::vector<float> _pTArr = std::vector<float>(81);
+    std::vector<float> _etaArr = std::vector<float>(101);
     std::vector<float> _chargeArr = std::vector<float>(3);
     void setAxisarrays();
 
diff --git a/analysisOnData/python/getLumiWeight.py b/analysisOnData/python/getLumiWeight.py
index ccb1be2..0f2487a 100644
--- a/analysisOnData/python/getLumiWeight.py
+++ b/analysisOnData/python/getLumiWeight.py
@@ -25,7 +25,7 @@ class getLumiWeight(module):
         RDF = ROOT.ROOT.RDataFrame
         runs = RDF('Runs', self.inputFile)
          
-        genEventSumw = runs.Sum("genEventSumw_").GetValue()
+        genEventSumw = runs.Sum("genEventSumw").GetValue()
 
         #print 'genEventSumw : '+'{:1.1f}'.format(genEventSumw)+' weighted events'
         #print 'xsec         : '+'{:1.1f}'.format(self.xsec)+' fb'
diff --git a/analysisOnData/python/plotter_SignalACtemplates.py b/analysisOnData/python/plotter_SignalACtemplates.py
index 83337be..5a0bc2a 100644
--- a/analysisOnData/python/plotter_SignalACtemplates.py
+++ b/analysisOnData/python/plotter_SignalACtemplates.py
@@ -6,6 +6,7 @@ from collections import OrderedDict
 sys.path.append('../../bkgAnalysis')
 import bkg_utils
 import math
+import copy
 
 ROOT.gROOT.SetBatch()
 ROOT.TH1.AddDirectory(False)
@@ -28,7 +29,9 @@ class plotter:
             print self.inFile, ' does not exist'
             sys.exit(1)
         self.ACfile = ROOT.TFile.Open(ACfile)
-        self.imap = self.ACfile.Get("accMaps/mapTot")
+        self.imap = self.ACfile.Get("angularCoefficients/mapTot")
+        self.clos = copy.deepcopy(ROOT.TH2D("clos", "clos", self.imap.GetXaxis().GetNbins(),self.imap.GetXaxis().GetXbins().GetArray(),self.imap.GetYaxis().GetNbins(),self.imap.GetYaxis().GetXbins().GetArray()))
+        self.yields = {}
         
         self.helXsecs = OrderedDict()
         self.helXsecs["L"] = "A0"
@@ -51,35 +54,51 @@ class plotter:
         self.factors["A6"]=2.*math.sqrt(2)
         self.factors["A7"]=4.*math.sqrt(2)
 
-    def makeTH5slices(self, thn5, systname, chargeBin):
-        hname=thn5.GetName()
-        coeff = hname.replace('helXsecs',"")
+    def makeTH3slices(self, th3, systname, chargeBin):
+        
+        hname=th3.GetName()
+        iQt = int(hname.split('_')[1])
+        coeff = hname.split('_')[3]
+        
         try:
-            syst = "_" + coeff.split('_')[1]
-            coeff = coeff.split('_')[0]
+            syst = "_" + hname.split('_')[4]
         except IndexError:
             syst = ""
-        #minus charge
-        thn5.GetAxis(4).SetRange(chargeBin, chargeBin)
+        
+        for iY in range(1, th3.GetNbinsZ()+1):
+            
+            slicename = 'helXsecs'+ coeff + '_y_{}'.format(iY)+'_qt_{}'.format(iQt) + syst
+            th3.GetZaxis().SetRange(iY, iY)
+            
+            th2slice=th3.Project3D("y_{iY}_yxe".format(iY=iY))
+            th2slice.SetName(slicename)
+            #normalise templates to its helicity xsec
+            nsum = (3./16./math.pi)*self.imap.GetBinContent(iY,iQt)
+            if not 'UL' in hname:
+                hAC = self.ACfile.Get("angularCoefficients/harmonics{}".format(self.helXsecs[coeff]))
+                nsum = nsum*hAC.GetBinContent(iY,iQt)/self.factors[self.helXsecs[coeff]]
+            th2slice.Scale(nsum)
+            th2slice.SetDirectory(0)
+            self.histoDict[systname].append(th2slice)
+
+            if syst=="":
+                #print th2slice.GetName(), th2slice.Integral(0,th2slice.GetNbinsX()+2,0,th2slice.GetNbinsY()+2)
+                self.yields[(iY,iQt)]+=th2slice.Integral(0,th2slice.GetNbinsX()+2,0,th2slice.GetNbinsY()+2)
+
+    def closureMap(self):
         for iY in range(1, 7):
             for iQt in range(1, 9):
-                #w_y = 0. + iY*0.4
-                #w_qt = 0 + iQt*4
-                slicename = 'helXsecs'+ coeff + '_y_{}'.format(iY)+'_qt_{}'.format(iQt) + syst
-                thn5.GetAxis(2).SetRange(iY, iY)
-                thn5.GetAxis(3).SetRange(iQt, iQt)
-                th2slice=thn5.Projection(1, 0)
-                th2slice.SetName(slicename)
-                #normalise templates to its helicity xsec
-                nsum = (3./16./math.pi)*self.imap.GetBinContent(iY,iQt)
-                if not 'UL' in hname:
-                    hAC = self.ACfile.Get("angularCoefficients/harmonics{}".format(self.helXsecs[coeff]))
-                    nsum = nsum*hAC.GetBinContent(iY,iQt)/self.factors[self.helXsecs[coeff]]
-                th2slice.Scale(nsum)
-                th2slice.SetDirectory(0)
-                self.histoDict[systname].append(th2slice)
+                self.clos.SetBinContent(iY,iQt, self.yields[(iY,iQt)])
 
+        print self.yields
+        self.clos.Divide(self.imap)
+    
     def getHistos(self, chargeBin) :
+        
+        for iY in range(1, 7):
+            for iQt in range(1, 9):
+               self.yields[(iY,iQt)]=0.
+        
         basepath="templatesAC_Signal/"
         #self.chargeBin = 2  if charge == 1 else 1
         for sKind, sList in self.extSyst.iteritems():
@@ -87,13 +106,16 @@ class plotter:
             #print sKind, sList
             for sname in sList:#variations of each sKind
                 for htype in self.clist:
-                    fpath = basepath + sKind + '/helXsecs' + htype + '_'  + sname
-                    if sKind == 'Nominal' and sname == '': 
-                        fpath = basepath + sKind + '/helXsecs' + htype + sname
-                    print "Histo read:", fpath
-                    thn5 = self.inFile.Get(fpath)
-                    self.makeTH5slices(thn5, sKind, chargeBin)
-        self.symmetrisePDF()
+                    for iQt in range(1,9):
+                        fpath = basepath + sKind + '/qt_{}_helXsecs_'.format(iQt) + htype + '_'  + sname
+                        if sKind == 'Nominal' and sname == '': 
+                            fpath = basepath + sKind + '/qt_{}_helXsecs_'.format(iQt) + htype + sname
+                        #print "Histo read:", fpath
+                        th3 = self.inFile.Get(fpath)
+                        if not th3: continue
+                        self.makeTH3slices(th3, sKind, chargeBin)
+        #self.symmetrisePDF()
+        self.closureMap()
         self.writeHistos(chargeBin)
     
     def symmetrisePDF(self):
@@ -142,7 +164,9 @@ class plotter:
             fout.cd(sKind)
             for h in hlist:
                 h.Write()
-            fout.cd()
+        fout.cd("Nominal")
+        self.clos.Write()
+        self.imap.Write()
         fout.Save()
         fout.Close()
 
@@ -155,5 +179,5 @@ OUTPUT = args.output
 INPUT = args.input
 ACfile = args.AC
 p=plotter(outDir=OUTPUT, inDir = INPUT, ACfile=ACfile)
-p.getHistos(1)
+#p.getHistos(1)
 p.getHistos(2)
diff --git a/analysisOnData/runAnalysisOnWJetsMC.py b/analysisOnData/runAnalysisOnWJetsMC.py
index 5783b32..c4c0a7d 100644
--- a/analysisOnData/runAnalysisOnWJetsMC.py
+++ b/analysisOnData/runAnalysisOnWJetsMC.py
@@ -27,15 +27,16 @@ def RDFprocessWJetsMC(fvec, outputDir, sample, xsec, fileSF, ncores, pretendJob,
     filePt = ROOT.TFile.Open("data/histoUnfoldingSystPt_nsel2_dy3_rebin1_default.root")
     fileY = ROOT.TFile.Open("data/histoUnfoldingSystRap_nsel2_dy3_rebin1_default.root")
     fileAC = ROOT.TFile.Open("../analysisOnGen/genInput.root")
-    p.branch(nodeToStart = 'input', nodeToEnd = 'defs', modules = [ROOT.reweightFromZ(filePt,fileY),ROOT.baseDefinitions(),ROOT.weightDefinitions(fileSF),getLumiWeight(xsec=xsec, inputFile=fvec),ROOT.Replica2Hessian()])
+    #p.branch(nodeToStart = 'input', nodeToEnd = 'defs', modules = [ROOT.reweightFromZ(filePt,fileY),ROOT.baseDefinitions(),ROOT.weightDefinitions(fileSF),getLumiWeight(xsec=xsec, inputFile=fvec),ROOT.Replica2Hessian()])
+    p.branch(nodeToStart = 'input', nodeToEnd = 'defs', modules = [ROOT.reweightFromZ(filePt,fileY),ROOT.baseDefinitions(),getLumiWeight(xsec=xsec, inputFile=fvec),ROOT.Replica2Hessian()])
     for region,cut in selections_bkg.iteritems():
         if not bkg:
             if not region=='Signal': continue
         if 'aiso' in region:
             weight = 'float(puWeight*lumiweight*weightPt*weightY)'
         else:
-            weight = 'float(puWeight*lumiweight*WHSF*weightPt*weightY)'
-        
+            #weight = 'float(puWeight*lumiweight*WHSF*weightPt*weightY)'
+            weight = 'float(lumiweight)'
         print weight, "NOMINAL WEIGHT"
         
         nom = ROOT.vector('string')()
@@ -49,22 +50,22 @@ def RDFprocessWJetsMC(fvec, outputDir, sample, xsec, fileSF, ncores, pretendJob,
         p.branch(nodeToStart = 'defs', nodeToEnd = '{}/templates_{}/Nominal'.format('WToTau', region), modules = [ROOT.templates(wtotau_cut, weight, nom,"Nom",0)])
         if region == "Signal":
             print "adding muon histo to graph for Signal region"
-            p.branch(nodeToStart = 'defs', nodeToEnd = '{}/prefit_{}/Nominal'.format('WToMu', region), modules = [ROOT.muonHistos(wtomu_cut, weight, nom,"Nom",0)])     
-            p.branch(nodeToStart = 'defs', nodeToEnd = '{}/prefit_{}/Nominal'.format('WToTau', region), modules = [ROOT.muonHistos(wtotau_cut, weight, nom,"Nom",0)])     
+            #p.branch(nodeToStart = 'defs', nodeToEnd = '{}/prefit_{}/Nominal'.format('WToMu', region), modules = [ROOT.muonHistos(wtomu_cut, weight, nom,"Nom",0)])     
+            #p.branch(nodeToStart = 'defs', nodeToEnd = '{}/prefit_{}/Nominal'.format('WToTau', region), modules = [ROOT.muonHistos(wtotau_cut, weight, nom,"Nom",0)])     
             #reco templates with AC reweighting
             steps = [ROOT.getACValues(fileAC),ROOT.defineHarmonics(),ROOT.getMassWeights(),ROOT.getWeights()]
             p.branch(nodeToStart = 'defs', nodeToEnd = 'defsAC', modules = steps)
             p.branch(nodeToStart = 'defsAC', nodeToEnd = '{}/templatesAC_{}/Nominal'.format('WToMu', region), modules = [ROOT.templateBuilder(wtomu_cut, weight,nom,"Nom",0)])
             #reco templates for out of acceptance events
 
-            wtomu_cut+= "&& GenV_preFSR_qt>32. && GenV_preFSR_yabs>2.4"
+            wtomu_cut+= "&& Wpt_preFSR>32. && Wrap_preFSR_abs>2.4"
             p.branch(nodeToStart = 'defsAC', nodeToEnd = '{}/templatesLowAcc_{}/Nominal'.format('WToMu', region), modules = [ROOT.templates(wtomu_cut, weight, nom,"Nom",0)])
             mass = ROOT.vector('string')()
             mass.push_back("_massUp")
             mass.push_back("_massDown")
             p.branch(nodeToStart = 'defsAC', nodeToEnd = '{}/templatesLowAcc_{}/Nominal'.format('WToMu', region), modules = [ROOT.templates(wtomu_cut, weight, mass,"massWeights",0)])
             wtomu_cut = cut + wdecayselections['WToMu']        
-
+        """
         #weight variations
         for s,variations in systematics.iteritems():
             print "branching weight variations", s
@@ -128,7 +129,7 @@ def RDFprocessWJetsMC(fvec, outputDir, sample, xsec, fileSF, ncores, pretendJob,
                     print cut
                 p.branch(nodeToStart = 'defsAC', nodeToEnd = '{}/templatesLowAcc_{}/{}Vars'.format('WToMu', region,vartype), modules = [ROOT.templates(wtomu_cut_vec, weight, nom,"Nom",hcat,wtomu_var_vec)])
                 wtomu_newcut = cut + wdecayselections['WToMu'] 
-
+        """
     p.getOutput()
     p.saveGraph()
    
@@ -167,12 +168,14 @@ def main():
     fvec=ROOT.vector('string')()
     for dirname,fname in direc.iteritems():
         ##check if file exists or not
-        inputFile = '{}/{}/tree.root'.format(inDir, dirname)
+        inputFile = '/scratchnvme/emanca/wproperties-analysis/analysisOnGen/test_tree_*.root'
+        #inputFile = '/scratch/wmass/WJetsNoCUT/tree_noCut.root'
         isFile = os.path.isfile(inputFile)  
         if not isFile:
             print inputFile, " does not exist"
-            continue
+            #continue
         fvec.push_back(inputFile)
+        break
     if fvec.empty():
         print "No files found for directory:", samples[sample], " SKIPPING processing"
         sys.exit(1)
diff --git a/analysisOnData/src/THNweightsHelper.cpp b/analysisOnData/src/THNweightsHelper.cpp
index 04b76ae..9371221 100644
--- a/analysisOnData/src/THNweightsHelper.cpp
+++ b/analysisOnData/src/THNweightsHelper.cpp
@@ -55,8 +55,11 @@ void THNweightsHelper::Exec(unsigned int slot, const float &var1, const float &v
    values.emplace_back(var4);
    values.emplace_back(var5);
 
-   for (unsigned int i = 0; i < n_histos; ++i)
+   for (unsigned int i = 0; i < n_histos; ++i){
       histos[i]->Fill(values.data(), weight * weights[i]);
+      std::cout<< values[0] << " " << values[1] << " " <<values[2] << " " <<values[3] << " " <<values[4] << std::endl;
+      std::cout<< weight << " " << weights[i] << std::endl;
+   }
 }
 /// This method is called at the end of the event loop. It is used to merge all the internal THnTs which
 /// were used in each of the data processing slots.
diff --git a/analysisOnData/src/baseDefinitions.cpp b/analysisOnData/src/baseDefinitions.cpp
index 1cdd523..b8cd97f 100644
--- a/analysisOnData/src/baseDefinitions.cpp
+++ b/analysisOnData/src/baseDefinitions.cpp
@@ -8,8 +8,9 @@ RNode baseDefinitions::run(RNode d)
         One.emplace_back(1.);
         return One;
     };
-
+    
     //define all nominal quantities // true for data and MC
+    /*
     auto d1 = d.Define("Mu1_eta", getFromIdx, {"Muon_eta", "Idx_mu1"})
                   .Define("Mu1_phi", getFromIdx, {"Muon_phi", "Idx_mu1"})
                   .Define("Mu1_charge", getCharge, {"Muon_charge", "Idx_mu1"})
@@ -20,31 +21,38 @@ RNode baseDefinitions::run(RNode d)
                   .Define("Mu1_dxy", getFromIdx, {"Muon_dxy", "Idx_mu1"})
                   .Define("MT", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
                   .Define("Recoil_pt", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
-                  .Define("Nom", defineNomweight);
-
+    */
+    auto d1 = d.Define("Nom", defineNomweight);
+    
     //at this point return the node in case of data
     if (!_isMC)
-        return d1;
+        return d;
 
     //now get variations // true only for MC
-    auto d1withCompvar = d1.Define("Mu1_pt_correctedDown", getFromIdx, {"Muon_correctedDown_pt", "Idx_mu1"})
-                             .Define("Mu1_pt_correctedUp", getFromIdx, {"Muon_correctedUp_pt", "Idx_mu1"})
-                             .Define("MT_correctedUp", W_mt, {"Mu1_pt_correctedUp", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
-                             .Define("MT_correctedDown", W_mt, {"Mu1_pt_correctedDown", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
-                             .Define("MT_jerUp", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerUp", "MET_phi_jerUp"})
-                             .Define("MT_jerDown", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerDown", "MET_phi_jerDown"})
-                             .Define("MT_jesTotalUp", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalUp", "MET_phi_jesTotalUp"})
-                             .Define("MT_jesTotalDown", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalDown", "MET_phi_jesTotalDown"})
-                             .Define("MT_unclustEnUp", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnUp", "MET_phi_unclustEnUp"})
-                             .Define("MT_unclustEnDown", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnDown", "MET_phi_unclustEnDown"})
-                             .Define("Recoil_pt_correctedUp", W_hpt, {"Mu1_pt_correctedUp", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
-                             .Define("Recoil_pt_correctedDown", W_hpt, {"Mu1_pt_correctedDown", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
-                             .Define("Recoil_pt_jerUp", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerUp", "MET_phi_jerUp"})
-                             .Define("Recoil_pt_jerDown", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerDown", "MET_phi_jerDown"})
-                             .Define("Recoil_pt_jesTotalUp", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalUp", "MET_phi_jesTotalUp"})
-                             .Define("Recoil_pt_jesTotalDown", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalDown", "MET_phi_jesTotalDown"})
-                             .Define("Recoil_pt_unclustEnUp", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnUp", "MET_phi_unclustEnUp"})
-                             .Define("Recoil_pt_unclustEnDown", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnDown", "MET_phi_unclustEnDown"});
+    auto d1withCompvar = d.Define("genVtype","14.").Define("Wrap_preFSR_abs", "TMath::Abs(Wrap_preFSR)")
+      .Define("Nom", defineNomweight)
+      .Filter("GenPart_pdgId[GenPart_preFSRMuonIdx]<0")
+      .Define("Mu1_charge","float(-1.*fabs(GenPart_pdgId[GenPart_preFSRMuonIdx])/GenPart_pdgId[GenPart_preFSRMuonIdx])")
+      .Define("Mupt_preFSR", "GenPart_pt[GenPart_preFSRMuonIdx]")
+      .Define("Mueta_preFSR", "GenPart_eta[GenPart_preFSRMuonIdx]");
+      //.Define("Mu1_pt_correctedDown", getFromIdx, {"Muon_correctedDown_pt", "Idx_mu1"})
+      //.Define("Mu1_pt_correctedUp", getFromIdx, {"Muon_correctedUp_pt", "Idx_mu1"})
+      //.Define("MT_correctedUp", W_mt, {"Mu1_pt_correctedUp", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
+      //.Define("MT_correctedDown", W_mt, {"Mu1_pt_correctedDown", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
+      //.Define("MT_jerUp", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerUp", "MET_phi_jerUp"})
+      //.Define("MT_jerDown", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerDown", "MET_phi_jerDown"})
+      //.Define("MT_jesTotalUp", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalUp", "MET_phi_jesTotalUp"})
+      //.Define("MT_jesTotalDown", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalDown", "MET_phi_jesTotalDown"})
+      //.Define("MT_unclustEnUp", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnUp", "MET_phi_unclustEnUp"})
+      //.Define("MT_unclustEnDown", W_mt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnDown", "MET_phi_unclustEnDown"})
+      //.Define("Recoil_pt_correctedUp", W_hpt, {"Mu1_pt_correctedUp", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
+      //.Define("Recoil_pt_correctedDown", W_hpt, {"Mu1_pt_correctedDown", "Mu1_phi", "MET_pt_nom", "MET_phi_nom"})
+      //.Define("Recoil_pt_jerUp", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerUp", "MET_phi_jerUp"})
+      //.Define("Recoil_pt_jerDown", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jerDown", "MET_phi_jerDown"})
+      //.Define("Recoil_pt_jesTotalUp", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalUp", "MET_phi_jesTotalUp"})
+      //.Define("Recoil_pt_jesTotalDown", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_jesTotalDown", "MET_phi_jesTotalDown"})
+      //.Define("Recoil_pt_unclustEnUp", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnUp", "MET_phi_unclustEnUp"})
+      //.Define("Recoil_pt_unclustEnDown", W_hpt, {"Mu1_pt", "Mu1_phi", "MET_pt_unclustEnDown", "MET_phi_unclustEnDown"});
 
     auto colNames = d.GetColumnNames();
     bool LHE = false;
@@ -73,4 +81,4 @@ RNode baseDefinitions::run(RNode d)
         auto dLHE = d1withCompvar.Define("LHEScaleWeightred", reduceVec, {"LHEScaleWeight"});
         return dLHE;
     }
-}
\ No newline at end of file
+}
diff --git a/analysisOnData/src/defineHarmonics.cpp b/analysisOnData/src/defineHarmonics.cpp
index 0e4c334..19da386 100644
--- a/analysisOnData/src/defineHarmonics.cpp
+++ b/analysisOnData/src/defineHarmonics.cpp
@@ -37,12 +37,9 @@ RNode defineHarmonics::run(RNode d)
   auto multByWeight = [](float a, const ROOT::VecOps::RVec<float> &w) { return a * w; };
   auto multSqByWeight = [](float a, const ROOT::VecOps::RVec<float> &w) -> ROOT::VecOps::RVec<float> { return a * w * w; };
 
-  auto scaleAngles = [](float phi){
-    if(phi<0.) phi+=2*TMath::Pi();
-    return phi;
-  };
-
-  auto d1 = d.Define("GenV_preFSR_CSphiCorr", scaleAngles, {"GenV_preFSR_CSphi"}).Define("harmonicsVec", getHarmonicsVec, {"GenV_preFSR_CStheta", "GenV_preFSR_CSphiCorr"}).Define("harmonicsVecWeighted", multByWeight, {"lumiweight", "harmonicsVec"}).Define("harmonicsVecSqWeighted", multSqByWeight, {"lumiweight", "harmonicsVec"});
+  auto d1 = d.Define("harmonicsVec", getHarmonicsVec, {"CStheta_preFSR", "CSphi_preFSR"})
+                .Define("harmonicsVecWeighted", multByWeight, {"lumiweight", "harmonicsVec"})
+                .Define("harmonicsVecSqWeighted", multSqByWeight, {"lumiweight", "harmonicsVec"});
 
   return d1;
-}
+}
\ No newline at end of file
diff --git a/analysisOnData/src/getACValues.cpp b/analysisOnData/src/getACValues.cpp
index 72011f2..8579e57 100644
--- a/analysisOnData/src/getACValues.cpp
+++ b/analysisOnData/src/getACValues.cpp
@@ -1,6 +1,5 @@
 #include "interface/getACValues.hpp"
 
-
 RNode getACValues::run(RNode d)
 {
 
@@ -28,10 +27,8 @@ RNode getACValues::run(RNode d)
     return totval;
   };
 
-  auto d1 = d.Define("GenV_preFSR_yabs", "TMath::Abs(GenV_preFSR[1])")
-             .Define("GenV_preFSR_qt", "TMath::Abs(GenV_preFSR[0])")
-             .Define("AngCoeffVec", getACValues, {"GenV_preFSR_yabs", "GenV_preFSR_qt"})
-             .Define("totMap", getMapValue, {"GenV_preFSR_yabs", "GenV_preFSR_qt"});
+    auto d1 = d.Define("AngCoeffVec", getACValues, {"Wrap_preFSR_abs", "Wpt_preFSR"})
+             .Define("totMap", getMapValue, {"Wrap_preFSR_abs", "Wpt_preFSR"});
 
-  return d1;
+    return d1;
 }
diff --git a/analysisOnData/src/getMassWeights.cpp b/analysisOnData/src/getMassWeights.cpp
index 3bea5e5..fb0b9da 100644
--- a/analysisOnData/src/getMassWeights.cpp
+++ b/analysisOnData/src/getMassWeights.cpp
@@ -24,6 +24,6 @@ RNode getMassWeights::run(RNode d)
     return v;
   };
 
-  auto d1 = d.Define("massWeights", getBWVec, {"GenV_preFSR_qt"});
+  auto d1 = d.Define("massWeights", getBWVec, {"Wmass_preFSR"});
   return d1;
-}
\ No newline at end of file
+}
diff --git a/analysisOnData/src/getWeights.cpp b/analysisOnData/src/getWeights.cpp
index 1904496..1fc3cf2 100644
--- a/analysisOnData/src/getWeights.cpp
+++ b/analysisOnData/src/getWeights.cpp
@@ -37,9 +37,9 @@ RNode getWeights::run(RNode d){
         return (harmonicsVec/norm);
 
     };
-    auto d1 = d.Define("norm", getNorm, {"GenV_preFSR_qt", "GenV_preFSR_yabs", "AngCoeffVec", "harmonicsVec", "totMap"})
+    auto d1 = d.Define("norm", getNorm, {"Wpt_preFSR", "Wrap_preFSR_abs", "AngCoeffVec", "harmonicsVec", "totMap"})
                   .Define("harmonicsWeights", getWeights, {"norm", "harmonicsVec"});
 
     return d1;
     
-}
\ No newline at end of file
+}
diff --git a/analysisOnData/src/reweightFromZ.cpp b/analysisOnData/src/reweightFromZ.cpp
index 7142d36..89f9f1c 100644
--- a/analysisOnData/src/reweightFromZ.cpp
+++ b/analysisOnData/src/reweightFromZ.cpp
@@ -24,10 +24,7 @@ RNode reweightFromZ::run(RNode d)
             return _hY->GetBinContent(bin);
     };
 
-    auto d1 = d.Define("GenV_dress_qt", [&](ROOT::VecOps::RVec<float> vec) { return vec[0];}, {"GenV_dress"})
-               .Define("GenV_dress_y", [&](ROOT::VecOps::RVec<float> vec)  { return vec[1];}, {"GenV_dress"})
-               .Define("weightPt", getWeightPt, {"GenV_dress_qt"})
-               .Define("weightY", getWeightY, {"GenV_dress_y"});
+    auto d1 = d.Define("weightPt", getWeightPt, {"Wpt_dress"}).Define("weightY", getWeightY, {"Wrap_dress"});
 
     return d1;
 }
diff --git a/analysisOnData/src/templateBuilder.cpp b/analysisOnData/src/templateBuilder.cpp
index 67ab078..7cab303 100644
--- a/analysisOnData/src/templateBuilder.cpp
+++ b/analysisOnData/src/templateBuilder.cpp
@@ -1,3 +1,4 @@
+#include "interface/TH3weightsHelper.hpp"
 #include "interface/THNweightsHelper.hpp"
 #include "interface/templateBuilder.hpp"
 
@@ -38,29 +39,40 @@ RNode templateBuilder::run(RNode d)
 RNode templateBuilder::bookNominalhistos(RNode d)
 //books nominal histos (=nominal + mass variations)
 {
-  auto d1 = d.Filter("GenV_preFSR_qt<32. && GenV_preFSR_yabs<2.4").Define("harmonicsWeightsMass", vecMultiplication, {"massWeights", "harmonicsWeights"});
+  auto cut = [](float pt, float y) { return pt < 32. && y < 2.4; };
+
+  auto d1 = d.Filter(cut, {"Wpt_preFSR", "Wrap_preFSR_abs"}, "cut").Define("harmonicsWeightsMass", vecMultiplication, {"massWeights", "harmonicsWeights"});
+  // auto cutReport1 = d1.Report();
+  // cutReport1->Print();
 
   std::vector<std::string> mass = {"_massDown", "", "_massUp"};
   std::vector<std::string> total = stringMultiplication(mass, helXsecs);
 
-  THNweightsHelper helper{"helXsecs",                                        // Name
-                          "helXsecs",                                        // Title
-                          {nBinsEta, nBinsPt, nBinsY, nBinsQt, nBinsCharge}, // NBins
-                          {-2.4, 25., 0., 0., -2},                           // Axes min values
-                          {2.4, 55., 2.4, 32., 2},                           // Axes max values
-                          total};
+  // templates for the fit
+  auto h = new TH2F("h", "h", nBinsY, 0, 2.4, nBinsQt, 0, 32.);
 
-  // We book the action: it will be treated during the event loop.
-  auto templ = d1.Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt", "GenV_preFSR_yabs", "GenV_preFSR_qt", "Mu1_charge", "weight", "harmonicsWeightsMass"});
-  _hNGroup.push_back(templ);
+  for(int j=1; j<h->GetNbinsY()+1; j++){ // for each W pt bin
+
+    float lowEdgePt = h->GetYaxis()->GetBinLowEdge(j);
+    float upEdgePt = h->GetYaxis()->GetBinUpEdge(j);
+
+    auto sel = [lowEdgePt, upEdgePt](float pt) { return (pt >lowEdgePt && pt<upEdgePt);};
+
+    TH3weightsHelper helperHelXsecs(std::string("qt_")+std::to_string(j)+std::string("_helXsecs_"), std::string("qt_")+std::to_string(j)+std::string("_helXsecs_"), nBinsEta, _etaArr, nBinsPt, _pTArr, nBinsY, _yArr, total);
+    auto htmp = d1.Filter(sel, {"Wpt_preFSR"}).Book<float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helperHelXsecs), {"Mueta_preFSR", "Mupt_preFSR", "Wrap_preFSR_abs", "lumiweight", "harmonicsWeightsMass"});
+    _h3Group.push_back(htmp);
 
+  }
+
+  auto test = d1.Histo2D(TH2D("test", "test", nBinsY, 0, 2.4, nBinsQt, 0, 32.), "Wrap_preFSR_abs", "Wpt_preFSR","lumiweight");
+  _h2List.push_back(test);
   return d1;
 }
 
 RNode templateBuilder::bookWeightVariatedhistos(RNode d)
 {
 
-  auto d1 = d.Filter("GenV_preFSR_qt<32. && GenV_preFSR_yabs<2.4").Define("harmonicsWeightsSyst", vecMultiplication, {_syst_weight, "harmonicsWeights"});
+  auto d1 = d.Filter("Wpt_preFSR<32. && Wrap_preFSR_abs<2.4").Define("harmonicsWeightsSyst", vecMultiplication, {_syst_weight, "harmonicsWeights"});
 
   std::vector<std::string> total = stringMultiplication(_syst_name, helXsecs);
 
@@ -72,7 +84,7 @@ RNode templateBuilder::bookWeightVariatedhistos(RNode d)
                           total};
 
   // We book the action: it will be treated during the event loop.
-  auto templ = d1.Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt", "GenV_preFSR_yabs", "GenV_preFSR_qt", "Mu1_charge", "weight", "harmonicsWeightsSyst"});
+  auto templ = d1.Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt", "Wrap_preFSR_abs", "Wpt_preFSR", "Mu1_charge", "weight", "harmonicsWeightsSyst"});
   _hNGroup.push_back(templ);
 
   return d1;
@@ -81,7 +93,7 @@ RNode templateBuilder::bookWeightVariatedhistos(RNode d)
 RNode templateBuilder::bookptCorrectedhistos(RNode d)
 
 {
-  auto d1 = d.Filter("GenV_preFSR_qt<32. && GenV_preFSR_yabs<2.4");
+  auto d1 = d.Filter("Wpt_preFSR<32. && Wrap_preFSR_abs<2.4");
   for (unsigned int i = 0; i < _colvarvec.size(); i++)
   {
     std::vector<std::string> tmp;
@@ -95,7 +107,7 @@ RNode templateBuilder::bookptCorrectedhistos(RNode d)
                             total};
 
     // We book the action: it will be treated during the event loop.
-    auto templ = d1.Filter(_filtervec[i]).Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt" + _colvarvec[i], "GenV_preFSR_yabs", "GenV_preFSR_qt", "Mu1_charge", "weight", "harmonicsWeights"});
+    auto templ = d1.Filter(_filtervec[i]).Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt" + _colvarvec[i], "Wrap_preFSR_abs", "Wpt_preFSR", "Mu1_charge", "weight", "harmonicsWeights"});
     _hNGroup.push_back(templ);
   }
   return d1;
@@ -104,7 +116,7 @@ RNode templateBuilder::bookptCorrectedhistos(RNode d)
 RNode templateBuilder::bookJMEvarhistos(RNode d)
 
 {
-  auto d1 = d.Filter("GenV_preFSR_qt<32. && GenV_preFSR_yabs<2.4").Define("harmonicsWeightsPt", vecMultiplication, {"massWeights", "harmonicsWeights"});
+  auto d1 = d.Filter("Wpt_preFSR<32. && Wrap_preFSR_abs<2.4").Define("harmonicsWeightsPt", vecMultiplication, {"massWeights", "harmonicsWeights"});
 
   for (unsigned int i = 0; i < _colvarvec.size(); i++)
   {
@@ -120,8 +132,19 @@ RNode templateBuilder::bookJMEvarhistos(RNode d)
                             total};
 
     // We book the action: it will be treated during the event loop.
-    auto templ = d1.Filter(_filtervec[i]).Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt", "GenV_preFSR_yabs", "GenV_preFSR_qt", "Mu1_charge", "weight", "harmonicsWeights"});
+    auto templ = d1.Filter(_filtervec[i]).Book<float, float, float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt", "Wrap_preFSR_abs", "Wpt_preFSR", "Mu1_charge", "weight", "harmonicsWeights"});
     _hNGroup.push_back(templ);
   }
   return d1;
 }
+
+void templateBuilder::setAxisarrays()
+{
+  for (unsigned int i = 0; i < 81; i++){
+    float binSize = (65. - 25.) / 80;
+    _pTArr[i] = 25. + i*binSize;}
+  for (unsigned int i = 0; i < 101; i++)
+    _etaArr[i] = -2.5 + i * 5./100;
+  for (unsigned int i=0; i< 7; i++)
+    _yArr[i] = 0. + i*2.4/6;
+ }
diff --git a/analysisOnData/src/templates.cpp b/analysisOnData/src/templates.cpp
index b6d12ff..274d632 100644
--- a/analysisOnData/src/templates.cpp
+++ b/analysisOnData/src/templates.cpp
@@ -20,7 +20,7 @@ RNode templates::run(RNode d)
 RNode templates::bookNominalhistos(RNode df)
 {
     TH3weightsHelper helper(std::string("templates"), std::string(" ; muon #{eta}; muon p_{T} (Rochester corr.); muon charge"), _etaArr.size() - 1, _etaArr, _pTArr.size() - 1, _pTArr, _chargeArr.size() - 1, _chargeArr, _syst_name);
-    auto h = df.Filter(_filter).Book<float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mu1_eta", "Mu1_pt", "Mu1_charge", "weight", _syst_weight});
+    auto h = df.Filter(_filter).Book<float, float, float, float, ROOT::VecOps::RVec<float>>(std::move(helper), {"Mueta_preFSR", "Mupt_preFSR", "Mu1_charge", "weight", _syst_weight});
     _h3Group.emplace_back(h);
 
     return df;
@@ -49,10 +49,11 @@ RNode templates::bookJMEvarhistos(RNode df)
 
 void templates::setAxisarrays()
 {
-    for (unsigned int i = 0; i < 31; i++)
-        _pTArr[i] = 25. + i;
-    for (unsigned int i = 0; i < 49; i++)
-        _etaArr[i] = -2.4 + i * (4.8) / 48; //eta -2.4 to 2.4
+  for (unsigned int i = 0; i < 81; i++){
+      float binSize = (65. - 25.) / 80;
+      _pTArr[i] = 25. + i*binSize;}
+    for (unsigned int i = 0; i < 101; i++)
+        _etaArr[i] = -2.5 + i * 5./100;
     for (int i = 0; i < 3; i++)
       _chargeArr[i] = -2. +  i*2. ;
 }
diff --git a/analysisOnGen/Makefile b/analysisOnGen/Makefile
index 570770c..288f53f 100644
--- a/analysisOnGen/Makefile
+++ b/analysisOnGen/Makefile
@@ -1,5 +1,5 @@
 GCC=g++
-CXXFLAGS=`root-config --libs --cflags` -O3 -fPIC -Wall -I../  -I./  -I /scratch/sroychow/eigen-3.3.7/
+CXXFLAGS=`root-config --libs --cflags` -O3 -fPIC -Wall -I../  -I./  -I /scratchnvme/sroychow/eigen-3.3.7/
 SOFLAGS=-shared
 
 SRCDIR=src
@@ -33,7 +33,7 @@ $(OBJ) : $(BINDIR)/%.o : $(SRCDIR)/%.cpp interface/%.hpp | $(BINDIR)
 Dict: $(BINDIR)/dict.o
 
 $(BINDIR)/dict.o: $(SRC) | $(BINDIR)
-	genreflex $(SRCDIR)/classes.h -s $(SRCDIR)/classes_def.xml -o $(BINDIR)/dict.cc --fail_on_warnings --rootmap=$(BINDIR)/dict.rootmap --rootmap-lib=libSignalAnalysis.so -I interface/ -I../ -I /scratch/sroychow/eigen-3.3.7
+	genreflex $(SRCDIR)/classes.h -s $(SRCDIR)/classes_def.xml -o $(BINDIR)/dict.cc --fail_on_warnings --rootmap=$(BINDIR)/dict.rootmap --rootmap-lib=libSignalAnalysis.so -I interface/ -I../ -I /scratchnvme/sroychow/eigen-3.3.7
 	$(GCC) -c -o $(BINDIR)/dict.o $(CXXFLAGS) $(RPATH) -I interface $(BINDIR)/dict.cc
 
 $(BINDIR):
diff --git a/analysisOnGen/src/Replica2Hessian.cpp b/analysisOnGen/src/Replica2Hessian.cpp
index 0ef9410..3888a0b 100644
--- a/analysisOnGen/src/Replica2Hessian.cpp
+++ b/analysisOnGen/src/Replica2Hessian.cpp
@@ -13,7 +13,7 @@
 RNode Replica2Hessian::run(RNode d)
 {
 
-  auto newPDFweights = [this](rvec_f replicas, float lhenom, unsigned long long ev) {
+  auto newPDFweights = [this](ROOT::VecOps::RVec<float> replicas, float lhenom, unsigned long long ev) {
     std::vector<float> raw_weights;
 
     for (unsigned int i = 0; i < nPdfWeights_; i++)
